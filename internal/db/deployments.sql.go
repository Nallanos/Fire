// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: deployments.sql

package db

import (
	"context"
	"database/sql"
)

const createDeployment = `-- name: CreateDeployment :one
INSERT INTO deployments (id, app_id, status, created_at) 
    VALUES (?, ?, ?, CURRENT_TIMESTAMP) 
    RETURNING id, app_id, status, created_at, finished_at
`

type CreateDeploymentParams struct {
	ID     string `json:"id"`
	AppID  string `json:"app_id"`
	Status string `json:"status"`
}

func (q *Queries) CreateDeployment(ctx context.Context, arg CreateDeploymentParams) (Deployment, error) {
	row := q.db.QueryRowContext(ctx, createDeployment, arg.ID, arg.AppID, arg.Status)
	var i Deployment
	err := row.Scan(
		&i.ID,
		&i.AppID,
		&i.Status,
		&i.CreatedAt,
		&i.FinishedAt,
	)
	return i, err
}

const getLatestDeployment = `-- name: GetLatestDeployment :one
SELECT id, app_id, status, created_at, finished_at FROM deployments
WHERE app_id = ?
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetLatestDeployment(ctx context.Context, appID string) (Deployment, error) {
	row := q.db.QueryRowContext(ctx, getLatestDeployment, appID)
	var i Deployment
	err := row.Scan(
		&i.ID,
		&i.AppID,
		&i.Status,
		&i.CreatedAt,
		&i.FinishedAt,
	)
	return i, err
}

const listApplicationDeployments = `-- name: ListApplicationDeployments :many
SELECT id, app_id, status, created_at, finished_at FROM deployments WHERE app_id = ?
`

func (q *Queries) ListApplicationDeployments(ctx context.Context, appID string) ([]Deployment, error) {
	rows, err := q.db.QueryContext(ctx, listApplicationDeployments, appID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Deployment
	for rows.Next() {
		var i Deployment
		if err := rows.Scan(
			&i.ID,
			&i.AppID,
			&i.Status,
			&i.CreatedAt,
			&i.FinishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDeployment = `-- name: UpdateDeployment :exec
UPDATE deployments
    SET status = ?, finished_at = ?
    WHERE app_id = ?
`

type UpdateDeploymentParams struct {
	Status     string       `json:"status"`
	FinishedAt sql.NullTime `json:"finished_at"`
	AppID      string       `json:"app_id"`
}

func (q *Queries) UpdateDeployment(ctx context.Context, arg UpdateDeploymentParams) error {
	_, err := q.db.ExecContext(ctx, updateDeployment, arg.Status, arg.FinishedAt, arg.AppID)
	return err
}
