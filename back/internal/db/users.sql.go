// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package db

import (
	"context"
	"time"
)

const createSession = `-- name: CreateSession :exec
INSERT INTO tokens (user_id, token, expires_at) VALUES (?, ?, ?)
`

type CreateSessionParams struct {
	UserID    string    `json:"user_id"`
	Token     string    `json:"token"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.ExecContext(ctx, createSession, arg.UserID, arg.Token, arg.ExpiresAt)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, email, password, name) VALUES (?, ?, ?, ?)
`

type CreateUserParams struct {
	ID       string `json:"id"`
	Email    string `json:"email"`
	Password string `json:"password"`
	Name     string `json:"name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Password,
		arg.Name,
	)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM tokens WHERE token = ?
`

func (q *Queries) DeleteSession(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, token)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getSession = `-- name: GetSession :one
SELECT token, user_id, expires_at FROM tokens WHERE token = ?
`

func (q *Queries) GetSession(ctx context.Context, token string) (Token, error) {
	row := q.db.QueryRowContext(ctx, getSession, token)
	var i Token
	err := row.Scan(&i.Token, &i.UserID, &i.ExpiresAt)
	return i, err
}

const getSessionByUserId = `-- name: GetSessionByUserId :one
SELECT token, user_id, expires_at FROM tokens WHERE user_id = ?
`

func (q *Queries) GetSessionByUserId(ctx context.Context, userID string) (Token, error) {
	row := q.db.QueryRowContext(ctx, getSessionByUserId, userID)
	var i Token
	err := row.Scan(&i.Token, &i.UserID, &i.ExpiresAt)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, name, password FROM users WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Password,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, name, password FROM users WHERE id = ?
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Password,
	)
	return i, err
}

const updateUserName = `-- name: UpdateUserName :exec
UPDATE users SET name = ? WHERE id = ?
`

type UpdateUserNameParams struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (q *Queries) UpdateUserName(ctx context.Context, arg UpdateUserNameParams) error {
	_, err := q.db.ExecContext(ctx, updateUserName, arg.Name, arg.ID)
	return err
}
