// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: applications.sql

package db

import (
	"context"
)

const createApplication = `-- name: CreateApplication :one
INSERT INTO applications (id, name, image, port, status)
VALUES (?, ?, ?, ?, ?)
RETURNING id, name, status, image, port
`

type CreateApplicationParams struct {
	ID     string `json:"id"`
	Name   string `json:"name"`
	Image  string `json:"image"`
	Port   string `json:"port"`
	Status string `json:"status"`
}

func (q *Queries) CreateApplication(ctx context.Context, arg CreateApplicationParams) (Application, error) {
	row := q.db.QueryRowContext(ctx, createApplication,
		arg.ID,
		arg.Name,
		arg.Image,
		arg.Port,
		arg.Status,
	)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.Image,
		&i.Port,
	)
	return i, err
}

const deleteApplication = `-- name: DeleteApplication :exec
DELETE FROM applications WHERE id = ?
`

func (q *Queries) DeleteApplication(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteApplication, id)
	return err
}

const getApplication = `-- name: GetApplication :one
SELECT id, name, status, image, port FROM applications WHERE id = ? LIMIT 1
`

func (q *Queries) GetApplication(ctx context.Context, id string) (Application, error) {
	row := q.db.QueryRowContext(ctx, getApplication, id)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.Image,
		&i.Port,
	)
	return i, err
}

const listApplications = `-- name: ListApplications :many
SELECT id, name, status, image, port FROM applications
`

func (q *Queries) ListApplications(ctx context.Context) ([]Application, error) {
	rows, err := q.db.QueryContext(ctx, listApplications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Application
	for rows.Next() {
		var i Application
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Status,
			&i.Image,
			&i.Port,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateApplication = `-- name: UpdateApplication :exec
UPDATE applications
SET name = ?, image = ?, port = ?, status = ?
WHERE id = ?
`

type UpdateApplicationParams struct {
	Name   string `json:"name"`
	Image  string `json:"image"`
	Port   string `json:"port"`
	Status string `json:"status"`
	ID     string `json:"id"`
}

func (q *Queries) UpdateApplication(ctx context.Context, arg UpdateApplicationParams) error {
	_, err := q.db.ExecContext(ctx, updateApplication,
		arg.Name,
		arg.Image,
		arg.Port,
		arg.Status,
		arg.ID,
	)
	return err
}
